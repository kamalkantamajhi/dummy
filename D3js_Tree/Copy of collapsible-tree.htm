<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title></title>
    <script src="d3.min.js" type="text/javascript"></script>
    <script src="treeData.js" type="text/javascript"></script>
    <script src="d3.tip.v0.6.3.js" type="text/javascript"></script>
    <style>
        .node
        {
            cursor: pointer;
        }
        .node circle
        {
            fill: #fff;
            stroke: steelblue;
            stroke-width: 1.5px;
        }
        .node text
        {
            font: 10px sans-serif;
        }
        .link
        {
            fill: none;
            stroke: #ccc;
            stroke-width: 1.5px;
        }
        .d3-tip
        {
            line-height: 1;
            font-weight: normal;
            font-size: 14px;
            padding: 12px;
            background: rgba(150,221,255, 0.8);
            color: #fff;
            border-radius: 2px;
        }
        
        /* Creates a small triangle extender for the tooltip */
        .d3-tip:after
        {
            box-sizing: border-box;
            display: inline;
            font-size: 10px;
            width: 100%;
            line-height: 1;
            color: rgba(0, 0, 0, 0.8);
            content: "\25BC";
            position: absolute;
            text-align: center;
        }
        
        /* Style northward tooltips differently */
        .d3-tip.n:after
        {
            margin: -1px 0 0 0;
            top: 100%;
            left: 0;
        }
        
    </style>
</head>
<body>
<!--<button onclick="expandAll()">Expand All</button>
<button onclick="collapseAll()">Collapse All</button>
--><div id="tooltip" style="display: none"></div>
<div id="body"></div>
<script type="text/javascript">

    var realWidth = window.innerWidth;
    var realHeight = window.innerHeight;

    var margin = {top: 20, right: 120, bottom: 20, left: 120 },
        width = realWidth - margin.right - margin.left,
        height = realHeight - margin.top - margin.bottom;

    

    var i = 0,
    duration = 750,
    rectW = 100,
    rectH = 30;

    //Tooltip
    var tip = d3.tip()
          .attr('class', 'd3-tip')
          .offset([-10, 0])
          .html(function (d) {

              return "<span style='color:black'>" + d.name + "</span>";
          });

    var tree = d3.layout.tree()
        .nodeSize([110, 80]);

    var diagonal = d3.svg.diagonal()
    .projection(function (d) {
        return [d.x + rectW / 2, d.y + rectH / 2];
    });

    var svg = d3.select("#body").append("svg")
    .attr("width", width + margin.right + margin.left)
    .attr("height", height + margin.top + margin.bottom)
    .call(zm = d3.behavior.zoom().scaleExtent([0.5, 8])
    .on("zoom", redraw)).append("g")
    .attr("transform", "translate(" + 350 + "," + 20 + ")");

    svg.call(tip);

    //necessary so that zoom knows where to zoom and unzoom from
    zm.translate([350, 20]);

    root = treeData[0];

    root.x0 = 0;
    root.y0 = height / 2;

    function collapse(d) {
//                if (d.children) {
//                    d._children = d.children;
//                    d._children.forEach(collapse);
//                    d.children = null;
//                        }

        var children = (d.children) ? d.children : d._children;
        if (d._children) {
            d.children = d._children;
            d._children = null;
        }
        if (children)
            children.forEach(collapse);
    }

//    function expandAll() {
//        collapse(root);
//        update(root);
//    }

//    function collapseAll() {
//        root.children.forEach(collapse);
//        collapse(root);
//        update(root);
//    }

    root.children.forEach(collapse);

    update(root);

    

    function update(source) {

        // Compute the new tree layout.
        var nodes = tree.nodes(root).reverse(),
        links = tree.links(nodes);

        // Normalize for fixed-depth.
        nodes.forEach(function (d) {
            d.y = d.depth * 180;
        });

        // Update the nodes…
        var node = svg.selectAll("g.node")
        .data(nodes, function (d) {
            return d.id || (d.id = ++i);
        });

        // Enter any new nodes at the parent's previous position.
        var nodeEnter = node.enter().append("g")
            .attr("class", "node")
            .attr("transform", function (d) {
                return "translate(" + source.x0 + "," + source.y0 + ")";
            })
        .on("click", toggle);

        nodeEnter.append("rect")
        .attr("width", rectW)
        .attr("height", function (d) {
            if (d.name.length < 17) {
                return rectH;
            } else if (d.name.length > 17) {
                return rectH;
            }
        })
        .attr("stroke", "black")
        .attr("stroke-width", 1)
        .style("fill", "#96DDFF")
        .on('mouseover', tip.show)
        .on('mouseout', tip.hide);

        nodeEnter.append("text")
        .attr("x", rectW / 2)
        .attr("y", rectH / 2)
        .attr("dy", ".35em")
        .attr("text-anchor", "middle")
        .text(function (d) {
            var rName = d.name;

            if (rName.length <= 18) {
                var rtext = rName.slice(0, 18);
                return rtext;
            }
            else if (rName.length >= 18) {
                var rtext = rName.slice(0, 15);
                return rtext + "...";
            }

        });

        // Transition nodes to their new position.
        var nodeUpdate = node.transition()
        .duration(duration)
        .attr("transform", function (d) {
            return "translate(" + d.x + "," + d.y + ")";
        });

        nodeUpdate.select("rect")
        .attr("width", rectW)
        .attr("height", rectH)
        .attr("stroke", "black")
        .attr("stroke-width", 1)
        .style("fill", function (d) {
            return d._children ? "lightsteelblue" : "#fff";
        });

        nodeUpdate.select("text")
        .style("fill-opacity", 1);

        // Transition exiting nodes to the parent's new position.
        var nodeExit = node.exit().transition()
        .duration(duration)
        .attr("transform", function (d) {
            return "translate(" + source.x + "," + source.y + ")";
        })
        .remove();

        nodeExit.select("rect")
        .attr("width", rectW)
        .attr("height", rectH)
        //.attr("width", bbox.getBBox().width)""
        //.attr("height", bbox.getBBox().height)
        .attr("stroke", "black")
        .attr("stroke-width", 1);

        nodeExit.select("text");

        // Update the links…
        var link = svg.selectAll("path.link")
        .data(links, function (d) {
            return d.target.id;
        });

        // Enter any new links at the parent's previous position.
        link.enter().insert("path", "g")
        .attr("class", "link")
        .style("stroke", function (d) {
            if (d.target.type == "no") return "red";
            if (d.target.type == "yes") return "green";
        })
        .attr("x", rectW / 2)
        .attr("y", rectH / 2)
        .attr("d", function (d) {
            var o = {
                x: source.x0,
                y: source.y0
            };
            return diagonal({
                source: o,
                target: o
            });
        });

        link.append("text")
                .attr("font-family", "Arial, Helvetica, sans-serif")
                .attr("fill", "Black")
                .style("font", "normal 12px Arial")
                .attr("transform", function (d) {
                    return "translate(" +
            ((d.source.x + d.target.x) / 2) + "," +
            ((d.source.y + d.target.y) / 2) + ")";
                })
            .attr("dy", ".35em")
            .attr("text-anchor", "middle")
            .text(function (d) {
                //console.log(d.target.type);
                return d.target.type;
            });

        // Transition links to their new position.
        link.transition()
        .duration(duration)
        .attr("d", diagonal);

        // Transition exiting nodes to the parent's new position.
        link.exit().transition()
        .duration(duration)
        .attr("d", function (d) {
            var o = {
                x: source.x,
                y: source.y
            };
            return diagonal({
                source: o,
                target: o
            });
        })
        .remove();

        // Stash the old positions for transition.
        nodes.forEach(function (d) {
            d.x0 = d.x;
            d.y0 = d.y;
        });
    }

    // Toggle children on click.
    function toggle(d) {
        if (d.children) {
            d._children = d.children;
            d.children = null;
        } else {
            d.children = d._children;
            d._children = null;
        }
        update(d);
    }

    //Redraw for zoom
    function redraw() {
        //console.log("here", d3.event.translate, d3.event.scale);
        svg.attr("transform",
      "translate(" + d3.event.translate + ")"
      + " scale(" + d3.event.scale + ")");
    }
</script>
</body>
</html>
